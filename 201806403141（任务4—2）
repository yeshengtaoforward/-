#include<iostream>
#include"algorithm"

using namespace std;

int V[200][200];//前i个物品装入容量为j的背包中获得的最大价值
int KnapSack(int n,int w[],int v[],int x[],int C)
{
    int i,j;
    for(i=0; i<=n; i++)
        V[i][0]=0;
    for(j=0; j<=C; j++)
        V[0][j]=0;
    for(i=0; i<=n-1; i++)
        for(j=0; j<=C; j++)
            if(j<w[i])
                V[i][j]=V[i-1][j];
            else
                V[i][j]=_MAX(V[i-1][j],V[i-1][j-w[i]]+v[i]);
    j=C;
    for(i=n-1; i>=0; i--)
    {
        if(V[i][j]>V[i-1][j])
        {
            x[i]=1;
            j=j-w[i];
        }
        else
            x[i]=0;
    }
    cout << "选中的物品时：" << endl;
    for(i=0; i<n; i++)
        cout << x[i];
    cout << endl;
    return V[n-1][C];

}

int main()
{
    int s;///获得的最大价值
    int w[15];///物品的重量
    int v[15];///物品的价值
    int x[15];///物品的选取状态
    int n,i;
    int C;///背包最大容量
    cout << "请输入背包的最大容量：" << endl;
    cin >> C;

    cout << "请输入物品数：" << endl;
    cin >> n;
    cout << "请分别输入物品的重量：" << endl;
    for(i=0; i<n; i++)
        cin >> w[i];

    cout << "请分别输入物品的价值：" << endl;
    for(i=0; i<n; i++)
        cin >> v[i];

    s=KnapSack(n,w,v,x,C);

    cout << "物品价值最大为：" << endl << s << endl;
	return 0;
}
